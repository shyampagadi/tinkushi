{"version":3,"sources":["Search.js","youtube.js","VideoItem.js","VideoList.js","VideoDeteil.js","App.js","serviceWorker.js","index.js"],"names":["Search","props","onInputChange","event","setState","term","target","value","console","log","name","onFormSubmit","preventDefault","state","className","onSubmit","this","onChange","type","Component","axios","create","baseURL","params","part","maxResults","key","VideoItem","video","onVideoSelect","onClick","src","snippet","thumbnails","high","url","alt","title","VideoList","videos","renderedList","map","id","videoId","VideoDetail","videoSrc","description","App","onTermSubmit","a","youtube","get","q","response","data","items","selectedVideo","React","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.cdd1efc4.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n// import youtube from './youtube'\r\nclass Search extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    this.state = {\r\n      term: '',\r\n    }\r\n  }\r\n\r\n  onInputChange = (event) => {\r\n    this.setState({ term: event.target.value })\r\n    console.log('NAME := ' + event.target.name)\r\n  }\r\n\r\n  onFormSubmit = (event) => {\r\n    event.preventDefault()\r\n    this.props.onFormSubmit(this.state.term)\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"search-bar ui segment\">\r\n        <form onSubmit={this.onFormSubmit} className=\"ui form\">\r\n          <div className=\"field\">\r\n            <label>Video Search</label>\r\n            <input\r\n              onChange={this.onInputChange}\r\n              type=\"text\"\r\n              value={this.state.term}\r\n              name=\"term\"\r\n            />\r\n          </div>\r\n        </form>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Search\r\n","import axios from 'axios';\r\n\r\nconst KEY =['AIzaSyD5uHFWghTOvQUhRm28HjXyfnQEe-_S5ts'];\r\n\r\nexport default axios.create({\r\n    baseURL: 'https://www.googleapis.com/youtube/v3/',\r\n    params: {\r\n        part: 'snippet',\r\n        maxResults: 5,\r\n        key: KEY\r\n    }\r\n})","import React from 'react'\r\n// import VideoList from './VideoList'\r\nimport './VideoItem.css'\r\nexport default function VideoItem({ video, onVideoSelect }) {\r\n  return (\r\n    // <div className=\"ui list\">\r\n    <div onClick={() => onVideoSelect(video)} className=\"ui list\">\r\n      <div className=\"video-item item\">\r\n        <img\r\n          className=\"ui image\"\r\n          src={video.snippet.thumbnails.high.url}\r\n          alt=\"\"\r\n        />\r\n        <div className=\"content\">\r\n          <div className=\"header\">{video.snippet.title}</div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport VideoItem from './VideoItem'\r\n\r\nexport default function VideoList({ videos, onVideoSelect }) {\r\n  const renderedList = videos.map((video) => {\r\n    return (\r\n      <VideoItem\r\n        onVideoSelect={onVideoSelect}\r\n        key={video.id.videoId}\r\n        video={video}\r\n      />\r\n    )\r\n  })\r\n  return <div>{renderedList}</div>\r\n}\r\n","import React from 'react'\r\n\r\nconst VideoDetail = ({ video }) => {\r\n  if (!video) {\r\n    return <div>Loading...</div>\r\n  }\r\n  const videoSrc = `https://www.youtube.com/embed/${video.id.videoId}`\r\n  return (\r\n    <div>\r\n      <div className=\"ui embed\">\r\n        <iframe src={videoSrc} title=\"SHyam\"></iframe>\r\n      </div>\r\n      <div className=\"ui segment\">\r\n        <h4 className=\"ui header\">{video.snippet.title}</h4>\r\n        <p>{video.snippet.description}</p>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default VideoDetail\r\n","import React from 'react'\nimport Search from './Search'\nimport youtube from './youtube'\nimport VideoList from './VideoList'\nimport VideoDetail from './VideoDeteil'\n// import axios from 'axios'\n// import logo from './logo.svg';\n// import './App.css';\nconst KEY = 'AIzaSyD5uHFWghTOvQUhRm28HjXyfnQEe-_S5ts'\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      videos: [],\n      selectedVideo: null,\n    }\n  }\n  componentDidMount() {\n    this.onTermSubmit('buildings')\n  }\n  onTermSubmit = async (term) => {\n    const response = await youtube.get('/search', {\n      params: {\n        q: term,\n        part: 'snippet',\n        maxResults: 5,\n        key: KEY,\n      },\n    })\n    this.setState({\n      videos: response.data.items,\n      selectedVideo: response.data.items[0],\n    })\n  }\n\n  onVideoSelect = (video) => {\n    this.setState({ selectedVideo: video })\n  }\n\n  render() {\n    return (\n      <div className=\"ui container\">\n        <Search onFormSubmit={this.onTermSubmit} />\n        <div className=\"ui grid\">\n          <div className=\"ui row\">\n            <div className=\"eleven wide column\">\n              <VideoDetail video={this.state.selectedVideo} />\n            </div>\n            <div className=\"five wide column\">\n              <VideoList\n                videos={this.state.videos}\n                onVideoSelect={this.onVideoSelect}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import 'semantic-ui-css/semantic.min.css'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}